function prepareData(entities, { sprintId }) {

    // –ú–∞—Å—Å–∏–≤, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –≤—Å—Ç–∞–≤–ª—è—Ç—å —Å–ª–∞–π–¥—ã
    let slides = [];



    // ** –†–∞–∑–±–∏–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—É—â–Ω–æ—Å—Ç–∏ *

    // * –ù–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
    let allProjects = [];
    let allIssues = [];

    // * –û–±—ã—á–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã, –ø–æ –Ω–∏–º –±—É–¥–µ–º —Ö–æ–¥–∏—Ç—å —Å –ø–æ–º–æ—â—å—é forEach
    let allComments = [];
    let allCommits = [];

    // * –ú–∞—Å—Å–∏–≤ –¥–ª—è —Å–ø—Ä–∏–Ω—Ç–æ–≤ –±—É–¥–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω, –ø–æ –Ω–µ–º—É –º–æ–∂–Ω–æ —Ö–æ–¥–∏—Ç—å –±–∏–Ω–ø–æ–∏—Å–∫–æ–º –∑–∞ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è
    let allSprints = [];

    // * –ê—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã –ø–æ –∫–ª—é—á—É = id - —Å–æ–∑–¥–∞—ë–º '—á–∏—Å—Ç—ã–µ' –æ–±—ä–µ–∫—Ç—ã –ø–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø—É null
    let allUsers = Object.create(null);
    let allSummaries = Object.create(null);

    // –°—Ç—ç–∫ –¥–ª—è –æ–±—Ö–æ–¥–∞ –≤ —à–∏—Ä–∏–Ω—É (—Å—Ç–µ–∫ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç—å –±—ã—Å—Ç—Ä–µ–µ –æ—á–µ—Ä–µ–¥–∏, –∞ –ø–æ—Ä—è–¥–æ–∫ –≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ –Ω–µ –≤–∞–∂–µ–Ω)
    let entityStack = [];

    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –≤ —Å—Ç–µ–∫
    entities.forEach(entity => entityStack.push(entity));

    // –û–±—Ö–æ–¥ –≤ —à–∏—Ä–∏–Ω—É
    while (entityStack.length > 0) {

        // –î–æ—Å—Ç–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å—Ç–µ–∫–∞
        let entity = entityStack.pop();

        // –ö–ª–∞–¥—ë–º –≤ –Ω—É–∂–Ω—É—é –∫–æ—Ä–æ–±–æ—á–∫—É
        switch (entity.type) {
            case 'Project':
                allProjects.push(entity);
                break;
            case 'Issue':
                allIssues.push(entity);
                break;
            case 'Comment':
                allComments.push(entity);
                break;
            case 'Commit':
                allCommits.push(entity);
                break;
            case 'Sprint':
                allSprints.push(entity);
                break;
            case 'User':
                allUsers[entity.id] = entity;
                break;
            case 'Summary':
                allSummaries[entity.id] = entity;
                break;
        }

        // –°–º–æ—Ç—Ä–∏–º –≤—Å–µ –∫–ª—é—á–∏
        for (key in entity) {

            // –ï—Å–ª–∏ –≤–∏–¥–∏–º –º–∞—Å—Å–∏–≤ - –∏—â–µ–º –≤ –Ω—ë–º –æ–±—ä–µ–∫—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø–æ–ª–µ type
            if (Array.isArray(entity[key])) {
                entity[key].forEach(item => {
                    if (typeof item === 'object' && item.type) {
                        entityStack.push(item);
                    }
                })
            }

            // –ï—Å–ª–∏ –≤–∏–¥–∏–º –æ–±—ä–µ–∫—Ç, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å –ø–æ–ª–µ type - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–µ–∫
            else if (typeof entity[key] === 'object' && entity[key] !== null && entity[key].type) {
                entityStack.push(entity[key]);
            }
        }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º allSprints –ø–æ id
    allSprints.sort((x, y) => x.id - y.id);

    // –ë–∏–Ω–ø–æ–∏—Å–∫ —Å–ø—Ä–∏–Ω—Ç–∞ –ø–æ id
    let findSprintById = id => {
        let l = -1, r = allSprints.length;
        while (r - l > 1) {
            let m = Math.floor((r + l) / 2);
            if (allSprints[m].id <= id)
                l = m;
            else
                r = m;
        }
        if (l === -1 || allSprints[l].id !== id)
            return undefined;
        else
            return allSprints[l];
    }

    // –ë–∏–Ω–ø–æ–∏—Å–∫ —Å–ø—Ä–∏–Ω—Ç–∞ –ø–æ timestamp
    let findSprintByTime = time => {
        let l = -1, r = allSprints.length;
        while (r - l > 1) {
            let m = Math.floor((r + l) / 2);
            if (allSprints[m].startAt <= time)
                l = m;
            else
                r = m;
        }
        if (l === -1 || allSprints[l].finishAt <= time)
            return undefined;
        else
            return allSprints[l];
    }



    // ** –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–∞–π–¥–∞ 'vote' *

    // –ò—â–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø—Ä–∏–Ω—Ç –≤ –º–∞—Å—Å–∏–≤–µ
    const currentSprint = findSprintById(sprintId);

    // –ê—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∏–≤: –∫–ª—é—á - id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–Ω–∞—á–µ–Ω–∏–µ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤.
    let voteLikesCnt = Object.create(null);
    for (let key in allUsers) {
        voteLikesCnt[allUsers[key].id] = 0;
    }

    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    allComments.forEach(comment => {

        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç—ã –≤ —Ç–µ–∫—É—â–µ–º —Å–ø—Ä–∏–Ω—Ç–µ
        if (comment.createdAt < currentSprint.startAt || currentSprint.finishAt <= comment.createdAt) {
            return;
        }

        // –ù–∞—Ö–æ–¥–∏–º id –∞–≤—Ç–æ—Ä–∞
        let userId = (typeof comment.author === 'number' ? comment.author : comment.author.id);

        // –ü—Ä–∏–±–∞–≤–ª—è–µ–º –ª–∞–π–∫–∏
        voteLikesCnt[userId] += comment.likes.length;
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ c id –∏ –ª–∞–π–∫–∞–º–∏, —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    let voteLikes = [];
    for (key in voteLikesCnt) {
        voteLikes.push({
            id: Number(key),
            likes: voteLikesCnt[key]
        });
    }
    voteLikes.sort((a, b) => {
        if (a.likes > b.likes) return -1;
        if (a.likes < b.likes) return 1;
        if (a.id < b.id) return -1;
        if (a.id > b.id) return 1;
        return 0;
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å ' –≥–æ–ª–æ—Å{_|–∞|–æ–≤}'
    let getVoteSuffix = num => {
        if (11 <= num % 100 && num % 100 <= 19)
            return ' –≥–æ–ª–æ—Å–æ–≤';
        else if (num % 10 === 1)
            return ' –≥–æ–ª–æ—Å';
        else if (2 <= num % 10 && num % 10 <= 4)
            return ' –≥–æ–ª–æ—Å–∞';
        return ' –≥–æ–ª–æ—Å–æ–≤';
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    let voteUsers = [];
    voteLikes.forEach(item => {

        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let user = allUsers[item.id];

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ—á–∫—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –º–∞—Å—Å–∏–≤
        voteUsers.push({
            id: user.id,
            name: user.name,
            avatar: user.avatar,
            valueText: item.likes + getVoteSuffix(item.likes)
        });
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–π–¥
    slides.push({
        alias: 'vote',
        data: {
            title: '–°–∞–º—ã–π üîé –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
            subtitle: currentSprint.name,
            emoji: 'üîé',
            users: voteUsers
        }
    });

    

    // ** –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–∞–π–¥–∞ 'leaders' *

    // –ê—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∏–≤: –∫–ª—é—á - id, –∑–Ω–∞—á–µ–Ω–∏–µ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤
    let leadersCommitsCnt = Object.create(null);

    // –°—á–∏—Ç–∞–µ–º –∫–æ–º–º–∏—Ç—ã
    allCommits.forEach(commit => {

        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç—ã –≤ —Ç–µ–∫—É—â–µ–º —Å–ø—Ä–∏–Ω—Ç–µ
        if (commit.timestamp < currentSprint.startAt || currentSprint.finishAt <= commit.timestamp) {
            return;
        }

        // –ù–∞—Ö–æ–¥–∏–º id –∞–≤—Ç–æ—Ä–∞
        let userId = (typeof commit.author === 'number' ? commit.author : comment.author.id);

        // –ó–∞—â–∏—Ç–∞ –æ—Ç undefined
        if (!leadersCommitsCnt[userId]) {
            leadersCommitsCnt[userId] = 0;
        }

        // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        leadersCommitsCnt[userId]++;
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤, —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    let leadersCommits = [];
    for (userId in leadersCommitsCnt) {
        leadersCommits.push({ id: Number(userId), commits: leadersCommitsCnt[userId] });
    }
    leadersCommits.sort((a, b) => {
        if (a.commits > b.commits) return -1;
        if (a.commits < b.commits) return 1;
        if (a.id < b.id) return -1;
        if (a.id > b.id) return 1;
        return 0;
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    let leadersUsers = [];
    leadersCommits.forEach(item => {

        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let user = allUsers[item.id];

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ—á–∫—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –º–∞—Å—Å–∏–≤
        leadersUsers.push({
            id: user.id,
            name: user.name,
            avatar: user.avatar,
            valueText: String(item.commits)
        });
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–π–¥
    slides.push({
        alias: 'leaders',
        data: {
            title: '–ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∫–æ–º–º–∏—Ç–æ–≤',
            subtitle: currentSprint.name,
            emoji: 'üëë',
            users: leadersUsers
        }
    });



    // ** –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–∞–π–¥–∞ 'chart' *

    // –ê—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∏–≤: –∫–ª—é—á - id —Å–ø—Ä–∏–Ω—Ç–∞, –∑–Ω–∞—á–µ–Ω–∏–µ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤
    let chartCommitsCnt = Object.create(null);

    // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –∫–æ–º–º–∏—Ç–∞–º–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—Å—Å–∏–≤
    allSprints.forEach(sprint => {
        chartCommitsCnt[sprint.id] = 0;
    });

    // –ü–æ–¥—Å—á–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤
    allCommits.forEach(commit => {
        let sprint = findSprintByTime(commit.timestamp);
        chartCommitsCnt[sprint.id]++;
    });

    // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    let chartValues = [];
    for (let key in chartCommitsCnt) {
        let sprint = findSprintById(Number(key));
        let obj = {
            title: String(sprint.id),
            hint: sprint.name,
            value: chartCommitsCnt[key],
        }
        if (sprint.id === currentSprint.id) {
            obj.active = true;
        }
        chartValues.push(obj);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–π–¥
    slides.push({
        alias: 'chart',
        data: {
            title: '–ö–æ–º–º–∏—Ç—ã',
            subtitle: currentSprint.name,
            values: chartValues,

            // –õ–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–º–∏—Ç–æ–≤ –º–æ–∂–µ–º –≤–∑—è—Ç—å –∏–∑ —Å–ª–∞–π–¥–∞ leaders
            users: leadersUsers
        }
    });



    // ** –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–∞–π–¥–∞ 'diagram' *

    // –ò—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø—Ä–∏–Ω—Ç
    const prevSprint = findSprintById(sprintId - 1);
    
    // –ö–æ–º–º–∏—Ç—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø—Ä–∏–Ω—Ç—ã: [0] > 1001 —Å—Ç—Ä–æ–∫–∏, [1] 501 ‚Äî 1000 —Å—Ç—Ä–æ–∫, [2] 101 ‚Äî 500 —Å—Ç—Ä–æ–∫, [3] 1 ‚Äî 100 —Å—Ç—Ä–æ–∫
    let diagramCurrectCommits = [ 0, 0, 0, 0 ], diagramPrevCommits = [ 0, 0, 0, 0 ];

    // –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–¥–∂–Ω–æ –æ—Ç–Ω–µ—Å—Ç–∏ –∫–æ–º–º–∏—Ç
    let getCommitCategory = value => {
        if (value <= 100)
            return 3;
        if (value <= 500)
            return 2;
        if (value <= 1000)
            return 1;
        return 0;
    }

    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ–º–º–∏—Ç—ã
    allCommits.forEach(commit => {

        // –°—Ä–∞–∑—É –æ—Ç—Å–µ–∏–≤–∞–µ–º –∫–æ–º–º–∏—Ç—ã, –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–ø—Ä–∏–Ω—Ç—É
        if ( prevSprint && (commit.timestamp < prevSprint.startAt    && currentSprint.finishAt <= commit.timestamp)
        ||  !prevSprint && (commit.timestamp < currentSprint.startAt && currentSprint.finishAt <= commit.timestamp) ) {
            return;
        }

        // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –∫–æ–º–º–∏—Ç–µ
        let commitTotalStrings = 0;
        commit.summaries.forEach(item => {
            let summary = (typeof item === 'object' ? item : allSummaries[item]);
            commitTotalStrings += summary.added + summary.removed;
        });
        let category = getCommitCategory(commitTotalStrings);

        // –†–µ—à–∞–µ–º, –≤ –∫–∞–∫–æ–π —Å–ø—Ä–∏–Ω—Ç –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–∏—Ç
        if (prevSprint && prevSprint.startAt <= commit.timestamp && commit.timestamp < prevSprint.finishAt)
            diagramPrevCommits[category]++;
        else if (currentSprint.startAt <= commit.timestamp && commit.timestamp < currentSprint.finishAt)
            diagramCurrectCommits[category]++;
    });

    // –°—á–∏—Ç–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É
    let diagramDifferences = diagramCurrectCommits.map((item, index) => diagramCurrectCommits[index] - diagramPrevCommits[index]);

    // –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ —Å–ø—Ä–∏–Ω—Ç–∞–º
    let diagramCurrentValue = diagramCurrectCommits.reduce((sum, item) => sum += item, 0);
    let diagramPrevValue = diagramPrevCommits.reduce((sum, item) => sum += item, 0);
    let diagramTotalDifference = diagramCurrentValue - diagramPrevValue;

    // –§—É–Ω–∫—Ü–∏—è, –¥–æ–±–∞–≤–ª—è—é—â–∞—è —Å—É—Ñ—Ñ–∏–∫—Å '–∫–æ–º–º–∏—Ç{_|–∞|–æ–≤}'
    let getDiagramSuffix = (num) => {
        num = Math.abs(num);
        if (11 <= num % 100 && num % 100 <= 19)
            return ' –∫–æ–º–º–∏—Ç–æ–≤';
        else if (num % 10 === 1)
            return ' –∫–æ–º–º–∏—Ç';
        else if (2 <= num % 10 && num % 10 <= 4)
            return ' –∫–æ–º–º–∏—Ç–∞';
        return ' –∫–æ–º–º–∏—Ç–æ–≤';
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–π–¥
    slides.push({
        alias: 'diagram',
        data: {
            title: '–†–∞–∑–º–µ—Ä –∫–æ–º–º–∏—Ç–æ–≤',
            subtitle: currentSprint.name,
            totalText: diagramCurrentValue + getDiagramSuffix(diagramCurrentValue),
            differenceText: (diagramTotalDifference > 0 ? '+' : '') + diagramTotalDifference + ' —Å –ø—Ä–æ—à–ª–æ–≥–æ —Å–ø—Ä–∏–Ω—Ç–∞',
            categories: [
                { 
                    title : '> 1001 —Å—Ç—Ä–æ–∫–∏',
                    valueText: diagramCurrectCommits[0] + getDiagramSuffix(diagramCurrectCommits[0]),
                    differenceText: (diagramDifferences[0] > 0 ? '+' : '') + diagramDifferences[0] + getDiagramSuffix(diagramDifferences[0])
                },
                { 
                    title : '501 ‚Äî 1000 —Å—Ç—Ä–æ–∫',
                    valueText: diagramCurrectCommits[1] + getDiagramSuffix(diagramCurrectCommits[1]),
                    differenceText: (diagramDifferences[1] > 0 ? '+' : '') + diagramDifferences[1] + getDiagramSuffix(diagramDifferences[1])
                },
                { 
                    title : '101 ‚Äî 500 —Å—Ç—Ä–æ–∫',
                    valueText: diagramCurrectCommits[2] + getDiagramSuffix(diagramCurrectCommits[2]),
                    differenceText: (diagramDifferences[2] > 0 ? '+' : '') + diagramDifferences[2] + getDiagramSuffix(diagramDifferences[2])
                },
                { 
                    title : '1 ‚Äî 100 —Å—Ç—Ä–æ–∫',
                    valueText: diagramCurrectCommits[3] + getDiagramSuffix(diagramCurrectCommits[3]),
                    differenceText: (diagramDifferences[3] > 0 ? '+' : '') + diagramDifferences[3] + getDiagramSuffix(diagramDifferences[3])
                }
            ]
        }
    });



    // ** –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–∞–π–¥–∞ 'activity' *

    // –ù–∞–∑–≤–∞–Ω–∏–µ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    const dayNames = [ 'sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat' ];

    // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
    let activityData = {};
    for (let day = 0; day < 7; day++) {
        activityData[dayNames[day]] = [];
        for (let hour = 0; hour < 24; hour++) {
            activityData[dayNames[day]][hour] = 0;
        }
    }

    // –°—á–∏—Ç–∞–µ–º –∫–æ–º–º–∏—Ç—ã
    allCommits.forEach(commit => {

        // –û—Ç—Å–µ–∏–≤–∞–µ–º –∫–æ–º–º–∏—Ç—ã, –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É —Å–ø—Ä–∏–Ω—Ç—É
        if (commit.timestamp < currentSprint.startAt || currentSprint.finishAt <= commit.timestamp) {
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Date –∏ –¥–µ–ª–∞–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç
        let date = new Date(commit.timestamp);
        activityData[dayNames[date.getDay()]][date.getHours()]++;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–π–¥
    slides.push({
        alias: 'activity',
        data: {
            title: '–ö–æ–º–º–∏—Ç—ã',
            subtitle: currentSprint.name,
            data: activityData
        }
    });


    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–∞–π–¥—ã
    return slides;
}

module.exports = { prepareData }