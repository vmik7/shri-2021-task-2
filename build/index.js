function prepareData(entities, { sprintId }) {

    // –ú–∞—Å—Å–∏–≤, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –≤—Å—Ç–∞–≤–ª—è—Ç—å —Å–ª–∞–π–¥—ã
    let slides = [];





    // * –†–∞–∑–±–∏–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—É—â–Ω–æ—Å—Ç–∏


    // –ú–∞—Å—Å–∏–≤—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –≤—Å–µ —Å—É—â–Ω–æ—Å—Ç–∏ —Å–≤–æ–µ–≥–æ —Ç–∏–ø–∞
    let allProjects = [], allUsers = [], allIssues = [], allComments = [], allCommits = [], allSummaries = [], allSprints = [];

    // ! Debug
    // let objectInArrayCnt = 0;

    // –§—É–Ω–∫—Ü–∏—è –æ–±—Ö–æ–¥–∞
    let go = (obj) => {

        // –û—Ç—Å–µ–∫–∞–µ–º —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ obj –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º –∏–ª–∏ –æ–Ω —Ä–∞–≤–µ–Ω null
        if (typeof obj !== 'object' || obj === null) {
            return;
        }

        // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –º–∞—Å—Å–∏–≤, —Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º—Å—è –æ—Ç –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ
        if (Array.isArray(obj)) {
            for (item of obj) {
                if (typeof item === 'object') {
                    go(item);

                    // ! Debug
                    // objectInArrayCnt++;
                }
            }
            return;
        }

        // –ü–æ–º–µ—â–∞–µ–º –æ–±—ä–µ–∫—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –µ–≥–æ —Ç–∏–ø—É –º–∞—Å—Å–∏–≤
        switch (obj.type) {
            case 'Project':
                allProjects.push(obj);
                break;
            case 'User':
                allUsers.push(obj);
                break;
            case 'Issue':
                allIssues.push(obj);
                break;
            case 'Comment':
                allComments.push(obj);
                break;
            case 'Commit':
                allCommits.push(obj);
                break;
            case 'Summary':
                allSummaries.push(obj);
                break;
            case 'Sprint':
                allSprints.push(obj);
                break;
        }

        // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º –æ–±—ä–µ–∫—Ç–∞, –∏ –µ—Å–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –∏–∑ –Ω–∏—Ö —Ç–æ–∂–µ –æ–±—ä–µ–∫—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º—Å—è –∏ –æ—Ç –Ω–µ–≥–æ
        for (key in obj) {
            if (typeof obj[key] === 'object') {
                go(obj[key]);
            }
        }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ö–æ–¥ –ø–æ –≤—Å–µ–º—É –º–∞—Å—Å–∏–≤—É –¥–∞–Ω–Ω—ã—Ö
    go(entities);

    // ! Debug
    // console.log('–í—Å–µ–≥–æ Projects: ' + allProjects.length + '. –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ: ' + entities.filter(item => item.type === 'Project').length);
    // console.log('–í—Å–µ–≥–æ Users: ' + allUsers.length + '. –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ: ' + entities.filter(item => item.type === 'User').length);
    // console.log('–í—Å–µ–≥–æ Issues: ' + allIssues.length + '. –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ: ' + entities.filter(item => item.type === 'Issue').length);
    // console.log('–í—Å–µ–≥–æ Comments: ' + allComments.length + '. –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ: ' + entities.filter(item => item.type === 'Comment').length);
    // console.log('–í—Å–µ–≥–æ Commits: ' + allCommits.length + '. –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ: ' + entities.filter(item => item.type === 'Commit').length);
    // console.log('–í—Å–µ–≥–æ Summaries: ' + allSummaries.length + '. –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ: ' + entities.filter(item => item.type === 'Summary').length);
    // console.log('–í—Å–µ–≥–æ Sprints: ' + allSprints.length + '. –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ: ' + entities.filter(item => item.type === 'Sprint').length);
    // console.log('objectInArrayCnt: ' + objectInArrayCnt + '. –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ: ' + entities.length);





    // * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–∞–π–¥–∞ 'vote'


    // –ò—â–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø—Ä–∏–Ω—Ç –≤ –º–∞—Å—Å–∏–≤–µ
    let currentSprint = allSprints.find(item => item.id === sprintId);

    // –°—á–∏—Ç–∞–µ–º –ª–∞–π–∫–∏
    let voteLikesCnt = [];
    allComments.forEach(comment => {

        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç—ã –≤ —Ç–µ–∫—É—â–µ–º —Å–ø—Ä–∏–Ω—Ç–µ
        if (comment.createdAt < currentSprint.startAt || comment.createdAt >= currentSprint.finishAt) {
            return;
        }

        // –ù–∞—Ö–æ–¥–∏–º id –∞–≤—Ç–æ—Ä–∞
        let userId = (typeof comment.author === 'number' ? comment.author : comment.author.id);

        // –ó–∞—â–∏—Ç–∞ –æ—Ç undefined
        if (!voteLikesCnt[userId]) {
            voteLikesCnt[userId] = 0;
        }

        // –ü—Ä–∏–±–∞–≤–ª—è–µ–º –ª–∞–π–∫–∏
        voteLikesCnt[userId] += comment.likes.length;
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
    let voteLikes = [];
    for (userId in voteLikesCnt) {
        voteLikes.push({ id: +userId, likes: voteLikesCnt[userId] });
    }
    voteLikes.sort((a, b) => b.likes - a.likes);

    // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å ' –≥–æ–ª–æ—Å{_|–∞|–æ–≤}'
    let getVoteSuffix = (num) => {
        if (11 <= num % 100 && num % 100 <= 14) {
            return ' –≥–æ–ª–æ—Å–æ–≤';
        }
        else if (num % 10 === 1) {
            return ' –≥–æ–ª–æ—Å';
        }
        else if (2 <= num % 10 && num % 10 <= 4) {
            return ' –≥–æ–ª–æ—Å–∞';
        }
        else {
            return ' –≥–æ–ª–æ—Å–æ–≤';
        }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    let voteUsers = [];
    voteLikes.forEach((item) => {

        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let user = allUsers.find(cur => cur.id === item.id);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ—á–∫—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –º–∞—Å—Å–∏–≤
        voteUsers.push({
            id: user.id,
            name: user.name,
            avatar: user.avatar,
            valueText: item.likes + getVoteSuffix(item.likes)
        });
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–π–¥
    slides.push({
        alias: 'vote',
        data: {
            title: '–°–∞–º—ã–π üîé –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
            subtitle: currentSprint.name,
            emoji: 'üîé',
            users: voteUsers
        }
    });

    



    // * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–∞–π–¥–∞ 'leaders'


    // –°—á–∏—Ç–∞–µ–º –∫–æ–º–º–∏—Ç—ã
    let leadersCommitsCnt = [];
    allCommits.forEach(commit => {

        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç—ã –≤ —Ç–µ–∫—É—â–µ–º —Å–ø—Ä–∏–Ω—Ç–µ
        if (commit.timestamp < currentSprint.startAt || commit.timestamp >= currentSprint.finishAt) {
            return;
        }

        // –ù–∞—Ö–æ–¥–∏–º id –∞–≤—Ç–æ—Ä–∞
        let userId = (typeof commit.author === 'number' ? commit.author : comment.author.id);

        // –ó–∞—â–∏—Ç–∞ –æ—Ç undefined
        if (!leadersCommitsCnt[userId]) {
            leadersCommitsCnt[userId] = 0;
        }

        // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        leadersCommitsCnt[userId]++;
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
    let leadersCommits = [];
    for (userId in leadersCommitsCnt) {
        leadersCommits.push({ id: +userId, commits: leadersCommitsCnt[userId] });
    }
    leadersCommits.sort((a, b) => b.commits - a.commits);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    let leadersUsers = [];
    leadersCommits.forEach((item) => {

        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let user = allUsers.find(cur => cur.id === item.id);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ—á–∫—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –º–∞—Å—Å–∏–≤
        leadersUsers.push({
            id: user.id,
            name: user.name,
            avatar: user.avatar,
            valueText: String(item.commits)
        });
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–π–¥
    slides.push({
        alias: 'leaders',
        data: {
            title: '–ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∫–æ–º–º–∏—Ç–æ–≤',
            subtitle: currentSprint.name,
            emoji: 'üëë',
            users: leadersUsers
        }
    });





    // * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–∞–π–¥–∞ 'chart'


    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤, —ç–ª–µ–º–µ–Ω—Ç—ã –≤–∏–¥–∞: { id, –Ω–∞—á–∞–ª–æ, –∫–æ–Ω–µ—Ü, –∫–æ–º–º–∏—Ç—ã }
    let chartSprintsData = [];

    // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –∫–æ–º–º–∏—Ç–∞–º–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—Å—Å–∏–≤
    allSprints.forEach(sprint => {
        chartSprintsData.push({
            id: sprint.id,
            begin: sprint.startAt,
            end: sprint.finishAt,
            commits: 0,
            name: sprint.name
        });
    });

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ id
    chartSprintsData.sort((a, b) => a.id - b.id);

    // –ü–æ–¥—Å—á–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤
    allCommits.forEach(commit => {
        chartSprintsData.some((item, index, array) => {
            if (item.begin <= commit.timestamp && commit.timestamp < item.end) {
                array[index].commits++;
                return true;
            }
            return false;
        });
    });

    // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    let chartValues = [];
    chartSprintsData.forEach(item => {
        let obj = {
            title: String(item.id),
            hint: item.name,
            value: item.commits,
        }
        if (item.id === currentSprint.id) {
            obj.active = true;
        }
        chartValues.push(obj);
    });

    // –£–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–º–∏—Ç–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π —Å–ø—Ä–∏–Ω—Ç –º–æ–∂–µ–º –≤–∑—è—Ç—å –∏–∑ —Å–ª–∞–π–¥–∞ leaders
    let chartUsers = leadersUsers;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–π–¥
    slides.push({
        alias: 'chart',
        data: {
            title: '–ö–æ–º–º–∏—Ç—ã',
            subtitle: currentSprint.name,
            values: chartValues,
            users: chartUsers
        }
    });





    // * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–∞–π–¥–∞ 'diagram'


    // –ò—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø—Ä–∏–Ω—Ç
    let prevSprint = allSprints.find(item => item.id === sprintId - 1);
    
    // –ö–æ–º–º–∏—Ç—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø—Ä–∏–Ω—Ç—ã: [0] > 1001 —Å—Ç—Ä–æ–∫–∏, [1] 501 ‚Äî 1000 —Å—Ç—Ä–æ–∫, [2] 101 ‚Äî 500 —Å—Ç—Ä–æ–∫, [3] 1 ‚Äî 100 —Å—Ç—Ä–æ–∫
    let diagramCurrectCommits = [ 0, 0, 0, 0 ], diagramPrevCommits = [ 0, 0, 0, 0 ];

    // –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–¥–∂–Ω–æ –æ—Ç–Ω–µ—Å—Ç–∏ –∫–æ–º–º–∏—Ç
    let getCommitCategory = (value) => {
        if (value <= 100) {
            return 3;
        }
        else if (value <= 500) {
            return 2;
        }
        else if (value <= 1000) {
            return 1;
        }
        else {
            return 0;
        }
    }

    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ–º–º–∏—Ç—ã
    allCommits.forEach(commit => {

        // –°—Ä–∞–∑—É –æ—Ç—Å–µ–∏–≤–∞–µ–º –∫–æ–º–º–∏—Ç—ã, –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–ø—Ä–∏–Ω—Ç—É
        if (prevSprint && commit.timestamp < prevSprint.startAt || !prevSprint && commit.timestamp < currentSprint.startAt || commit.timestamp >= currentSprint.finishAt) {
            return;
        }

        // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –∫–æ–º–º–∏—Ç–µ
        let commitTotalStrings = 0;
        commit.summaries.forEach(item => {
            let summary = (typeof item === 'object' ? item : allSummaries.find(cur => cur.id === item));
            commitTotalStrings += summary.added + summary.removed;
        });

        // –†–µ—à–∞–µ–º, –≤ –∫–∞–∫–æ–π —Å–ø—Ä–∏–Ω—Ç –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–∏—Ç
        if (prevSprint && prevSprint.startAt <= commit.timestamp && commit.timestamp < prevSprint.finishAt) {
            diagramPrevCommits[getCommitCategory(commitTotalStrings)]++;
        }
        else if (currentSprint.startAt <= commit.timestamp && commit.timestamp < currentSprint.finishAt) {
            diagramCurrectCommits[getCommitCategory(commitTotalStrings)]++;
        }
    });

    // –°—á–∏—Ç–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É
    let diagramDifferences = diagramCurrectCommits.map((item, index) => {
        return item - diagramPrevCommits[index];
    });

    // –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ —Å–ø—Ä–∏–Ω—Ç–∞–º
    let diagramCurrentValue = diagramCurrectCommits.reduce((sum, item) => sum += item, 0);
    let diagramPrevValue = diagramPrevCommits.reduce((sum, item) => sum += item, 0);
    let diagramTotalDifference = diagramCurrentValue - diagramPrevValue;

    // –§—É–Ω–∫—Ü–∏—è, –¥–æ–±–∞–≤–ª—è—é—â–∞—è —Å—É—Ñ—Ñ–∏–∫—Å '–∫–æ–º–º–∏—Ç{_|–∞|–æ–≤}'
    let getDiagramSuffix = (num) => {
        if (num < 0) {
            num = -num;
        }
        if (11 <= num % 100 && num % 100 <= 14) {
            return ' –∫–æ–º–º–∏—Ç–æ–≤';
        }
        else if (num % 10 === 1) {
            return ' –∫–æ–º–º–∏—Ç';
        }
        else if (2 <= num % 10 && num % 10 <= 4) {
            return ' –∫–æ–º–º–∏—Ç–∞';
        }
        else {
            return ' –∫–æ–º–º–∏—Ç–æ–≤';
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–π–¥
    slides.push({
        alias: 'diagram',
        data: {
            title: '–†–∞–∑–º–µ—Ä –∫–æ–º–º–∏—Ç–æ–≤',
            subtitle: currentSprint.name,
            totalText: diagramCurrentValue + getDiagramSuffix(diagramCurrentValue),
            differenceText: (diagramTotalDifference >= 0 ? '+' : '') + diagramTotalDifference + ' —Å –ø—Ä–æ—à–ª–æ–≥–æ —Å–ø—Ä–∏–Ω—Ç–∞',
            categories: [
                { 
                    title : '> 1001 —Å—Ç—Ä–æ–∫–∏',
                    valueText: diagramCurrectCommits[0] + getDiagramSuffix(diagramCurrectCommits[0]),
                    differenceText: (diagramDifferences[0] >= 0 ? '+' : '') + diagramDifferences[0] + getDiagramSuffix(diagramDifferences[0])
                },
                { 
                    title : '501 ‚Äî 1000 —Å—Ç—Ä–æ–∫',
                    valueText: diagramCurrectCommits[1] + getDiagramSuffix(diagramCurrectCommits[1]),
                    differenceText: (diagramDifferences[1] >= 0 ? '+' : '') + diagramDifferences[1] + getDiagramSuffix(diagramDifferences[1])
                },
                { 
                    title : '101 ‚Äî 500 —Å—Ç—Ä–æ–∫',
                    valueText: diagramCurrectCommits[2] + getDiagramSuffix(diagramCurrectCommits[2]),
                    differenceText: (diagramDifferences[2] >= 0 ? '+' : '') + diagramDifferences[2] + getDiagramSuffix(diagramDifferences[2])
                },
                { 
                    title : '1 ‚Äî 100 —Å—Ç—Ä–æ–∫',
                    valueText: diagramCurrectCommits[3] + getDiagramSuffix(diagramCurrectCommits[3]),
                    differenceText: (diagramDifferences[3] >= 0 ? '+' : '') + diagramDifferences[3] + getDiagramSuffix(diagramDifferences[3])
                }
            ]
        }
    });





    // * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–∞–π–¥–∞ 'activity'

    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –≤ —á–∞—Å–µ
    const MsPerHour = 60 * 60 * 1000;

    // –ù–∞–∑–≤–∞–Ω–∏–µ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    let dayNames = [ 'sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat' ];

    // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
    let activityData = {};
    for (let day = 0; day < 7; day++) {
        activityData[dayNames[day]] = [];
        for (let hour = 0; hour < 24; hour++) {
            activityData[dayNames[day]][hour] = 0;
        }
    }

    // –°—á–∏—Ç–∞–µ–º –∫–æ–º–º–∏—Ç—ã
    allCommits.forEach(commit => {

        // –û—Ç—Å–µ–∏–≤–∞–µ–º –∫–æ–º–º–∏—Ç—ã, –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É —Å–ø—Ä–∏–Ω—Ç—É
        if (commit.timestamp < currentSprint.startAt || currentSprint.finishAt <= commit.timestamp) {
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Date –∏ –¥–µ–ª–∞–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç
        let date = new Date(commit.timestamp);
        activityData[dayNames[date.getDay()]][date.getHours()]++;
    });


    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–π–¥
    slides.push({
        alias: 'activity',
        data: {
            title: '–ö–æ–º–º–∏—Ç—ã',
            subtitle: currentSprint.name,
            data: activityData
        }
    });



    return slides;
}

module.exports = { prepareData }