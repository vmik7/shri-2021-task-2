function prepareData(entities, { sprintId }) {

    // –ú–∞—Å—Å–∏–≤, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –≤—Å—Ç–∞–≤–ª—è—Ç—å —Å–ª–∞–π–¥—ã
    let slides = [];





    // * –†–∞–∑–±–∏–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—É—â–Ω–æ—Å—Ç–∏


    // –ú–∞—Å—Å–∏–≤—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –≤—Å–µ —Å—É—â–Ω–æ—Å—Ç–∏ —Å–≤–æ–µ–≥–æ —Ç–∏–ø–∞
    let allProjects = [], allUsers = [], allIssues = [], allComments = [], allCommits = [], allSummaries = [], allSprints = [];

    // ! Debug
    // let objectInArrayCnt = 0;

    // –§—É–Ω–∫—Ü–∏—è –æ–±—Ö–æ–¥–∞
    let go = (obj) => {

        // –û—Ç—Å–µ–∫–∞–µ–º —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ obj –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º –∏–ª–∏ –æ–Ω —Ä–∞–≤–µ–Ω null
        if (typeof obj !== 'object' || obj === null) {
            return;
        }

        // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –º–∞—Å—Å–∏–≤, —Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º—Å—è –æ—Ç –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ
        if (Array.isArray(obj)) {
            for (item of obj) {
                if (typeof item === 'object') {
                    go(item);

                    // ! Debug
                    // objectInArrayCnt++;
                }
            }
            return;
        }

        // –ü–æ–º–µ—â–∞–µ–º –æ–±—ä–µ–∫—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –µ–≥–æ —Ç–∏–ø—É –º–∞—Å—Å–∏–≤
        switch (obj.type) {
            case 'Project':
                allProjects.push(obj);
                break;
            case 'User':
                allUsers.push(obj);
                break;
            case 'Issue':
                allIssues.push(obj);
                break;
            case 'Comment':
                allComments.push(obj);
                break;
            case 'Commit':
                allCommits.push(obj);
                break;
            case 'Summary':
                allSummaries.push(obj);
                break;
            case 'Sprint':
                allSprints.push(obj);
                break;
        }

        // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º –æ–±—ä–µ–∫—Ç–∞, –∏ –µ—Å–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –∏–∑ –Ω–∏—Ö —Ç–æ–∂–µ –æ–±—ä–µ–∫—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º—Å—è –∏ –æ—Ç –Ω–µ–≥–æ
        for (key in obj) {
            if (typeof obj[key] === 'object') {
                go(obj[key]);
            }
        }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ö–æ–¥ –ø–æ –≤—Å–µ–º—É –º–∞—Å—Å–∏–≤—É –¥–∞–Ω–Ω—ã—Ö
    go(entities);

    // ! Debug
    // console.log('–í—Å–µ–≥–æ Projects: ' + allProjects.length + '. –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ: ' + entities.filter(item => item.type === 'Project').length);
    // console.log('–í—Å–µ–≥–æ Users: ' + allUsers.length + '. –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ: ' + entities.filter(item => item.type === 'User').length);
    // console.log('–í—Å–µ–≥–æ Issues: ' + allIssues.length + '. –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ: ' + entities.filter(item => item.type === 'Issue').length);
    // console.log('–í—Å–µ–≥–æ Comments: ' + allComments.length + '. –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ: ' + entities.filter(item => item.type === 'Comment').length);
    // console.log('–í—Å–µ–≥–æ Commits: ' + allCommits.length + '. –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ: ' + entities.filter(item => item.type === 'Commit').length);
    // console.log('–í—Å–µ–≥–æ Summaries: ' + allSummaries.length + '. –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ: ' + entities.filter(item => item.type === 'Summary').length);
    // console.log('–í—Å–µ–≥–æ Sprints: ' + allSprints.length + '. –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ: ' + entities.filter(item => item.type === 'Sprint').length);
    // console.log('objectInArrayCnt: ' + objectInArrayCnt + '. –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ: ' + entities.length);

    // –ò—â–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø—Ä–∏–Ω—Ç –≤ –º–∞—Å—Å–∏–≤–µ
    let currentSprint = allSprints.find(item => item.id === sprintId);





    // * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–∞–π–¥–∞ 'vote'


    // –°—á–∏—Ç–∞–µ–º –ª–∞–π–∫–∏
    let voteLikesCnt = [];
    allComments.forEach(comment => {

        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç—ã –≤ —Ç–µ–∫—É—â–µ–º —Å–ø—Ä–∏–Ω—Ç–µ
        if (comment.createdAt < currentSprint.startAt || comment.createdAt > currentSprint.finishAt) {
            return;
        }

        // –ù–∞—Ö–æ–¥–∏–º id –∞–≤—Ç–æ—Ä–∞
        let userId = (typeof comment.author === 'number' ? comment.author : comment.author.id);

        // –ó–∞—â–∏—Ç–∞ –æ—Ç undefined
        if (!voteLikesCnt[userId]) {
            voteLikesCnt[userId] = 0;
        }

        // –ü—Ä–∏–±–∞–≤–ª—è–µ–º –ª–∞–π–∫–∏
        voteLikesCnt[userId] += comment.likes.length;
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
    let voteLikes = [];
    for (userId in voteLikesCnt) {
        voteLikes.push({ id: +userId, likes: voteLikesCnt[userId] });
    }
    voteLikes.sort((a, b) => b.likes - a.likes);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    let voteUsers = [];
    voteLikes.forEach((item) => {

        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let user = allUsers.find(cur => cur.id === item.id);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ—á–∫—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –º–∞—Å—Å–∏–≤
        voteUsers.push({
            id: user.id,
            name: user.name,
            avatar: user.avatar,
            valueText: item.likes + ' –≥–æ–ª–æ—Å–æ–≤'
        });
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–π–¥
    slides.push({
        alias: 'vote',
        data: {
            title: '–°–∞–º—ã–π üîé –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
            subtitle: currentSprint.name,
            emoji: 'üîé',
            users: voteUsers
        }
    });

    



    // * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–∞–π–¥–∞ 'leaders'


    // –°—á–∏—Ç–∞–µ–º –∫–æ–º–º–∏—Ç—ã
    let leadersCommitsCnt = [];
    allCommits.forEach(commit => {

        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç—ã –≤ —Ç–µ–∫—É—â–µ–º —Å–ø—Ä–∏–Ω—Ç–µ
        if (commit.timestamp < currentSprint.startAt || commit.timestamp > currentSprint.finishAt) {
            return;
        }

        // –ù–∞—Ö–æ–¥–∏–º id –∞–≤—Ç–æ—Ä–∞
        let userId = (typeof commit.author === 'number' ? commit.author : comment.author.id);

        // –ó–∞—â–∏—Ç–∞ –æ—Ç undefined
        if (!leadersCommitsCnt[userId]) {
            leadersCommitsCnt[userId] = 0;
        }

        // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        leadersCommitsCnt[userId]++;
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
    let leadersCommits = [];
    for (userId in leadersCommitsCnt) {
        leadersCommits.push({ id: +userId, commits: leadersCommitsCnt[userId] });
    }
    leadersCommits.sort((a, b) => b.commits - a.commits);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    let leadersUsers = [];
    leadersCommits.forEach((item) => {

        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let user = allUsers.find(cur => cur.id === item.id);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ—á–∫—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –º–∞—Å—Å–∏–≤
        leadersUsers.push({
            id: user.id,
            name: user.name,
            avatar: user.avatar,
            valueText: String(item.commits)
        });
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–π–¥
    slides.push({
        alias: 'leaders',
        data: {
            title: '–ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∫–æ–º–º–∏—Ç–æ–≤',
            subtitle: currentSprint.name,
            emoji: 'üëë',
            users: leadersUsers
        }
    });






    return slides;
}

module.exports = { prepareData }